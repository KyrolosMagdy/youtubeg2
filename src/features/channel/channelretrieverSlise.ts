import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import { getChannel } from './channelretriever';
import { RootState } from '../../app/store';
import { ChannelDataType } from '../../components/Shared/ChannelDataType/ChannelDataType';

export interface VideosState {
  value: {};
  status: 'idle' | 'loading' | 'failed' | 'successed';
}

const initialState: VideosState = {
  value: {},
  status: 'idle',
};

export const fetchChannel = createAsyncThunk(
  'channel/getVideos',
  async (channelId?: string) => {
    const response: ChannelDataType = await getChannel(channelId);
    // The value we return becomes the `fulfilled` action payload
    return response;
  }
);

export const videosSlides = createSlice({
  name: 'channel',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {},
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(fetchChannel.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(fetchChannel.fulfilled, (state, action) => {
        state.status = 'successed';
        console.log('action: ', action);
        state.value = action.payload;
      });
  },
});

export const channel = (state: RootState): ChannelDataType | {} =>
  state.channel.value;
export const channelState = (state: RootState) => state.channel.status;

export default videosSlides.reducer;
