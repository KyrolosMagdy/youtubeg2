import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import { RootState } from '../../app/store';
import { getVideos } from './searchVideosAPI';
import { Videos } from '../../components/Shared/VideoDataType/VideoDataType';

export interface VideosState {
  value: Videos | {};
  status: 'idle' | 'loading' | 'failed' | 'successed';
}

const initialState: VideosState = {
  value: {},
  status: 'idle',
};

export const fetchVideos = createAsyncThunk(
  'videos/getVideos',
  async (q?: string) => {
    const response: Videos = await getVideos(q);
    // The value we return becomes the `fulfilled` action payload
    return response;
  }
);

export const videosSlides = createSlice({
  name: 'videos',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {},
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(fetchVideos.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(fetchVideos.fulfilled, (state, action) => {
        state.status = 'successed';
        console.log('action: ', action);
        state.value = action.payload;
      });
  },
});

// export const {  fetchVideos } = videosSlides.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const videos = (state: RootState) => state.videos.value;
export const videosState = (state: RootState) => state.videos.status;

// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.
// export const incrementIfOdd =
//   (amount: number): AppThunk =>
//   (dispatch, getState) => {
//     const currentValue = selectCount(getState());
//     if (currentValue % 2 === 1) {
//       dispatch(incrementByAmount(amount));
//     }
//   };

export default videosSlides.reducer;
